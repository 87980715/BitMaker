/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import com.qidianai.bitmaker.event.EvTicker;
import com.qidianai.bitmaker.event.EvTest;
import com.qidianai.bitmaker.eventsys.Event;
import com.qidianai.bitmaker.eventsys.Reactor;
import com.qidianai.bitmaker.eventsys.HandlerBase;
import org.apache.ignite.Ignite;
import org.apache.ignite.IgniteCache;
import org.apache.ignite.Ignition;
import org.junit.Test;

import java.util.concurrent.ConcurrentHashMap;


import static org.junit.Assert.*;

public class AppTest {
    @Test public void test() {
        App classUnderTest = new App();


        EvTicker q = new EvTicker();
        EvTest t = new EvTest();

        Long a = new Long(1L);
        Long b = new Long(1L);


        assertFalse(a == b);

        ConcurrentHashMap<Long, String> hashmap = new ConcurrentHashMap<>();
        hashmap.put(1L, "hi");

        assertTrue(hashmap.containsKey(1L));



    }

    @Test public void ReactorTest() throws InterruptedException {
        HandlerBase handler = new HandlerBase() {
            @Override
            public void handle(Event ev) {
                System.out.println(ev);
                System.out.println(ev.getData());
            }
        };

//        EvTicker q = new EvTicker();
//        EvTest t = new EvTest();
//
//        q.setData(t);

        Reactor reactor = new Reactor();


        reactor.start();

        reactor.register(EvTicker.class, handler);
        reactor.register(EvTest.class, handler);

//
//        reactor.publish(q);
//        reactor.publish(t);

        //Thread.sleep(1000);
        reactor.stop();
    }

    @Test public void IgniteTest() {
        Ignition.setClientMode(true);
        try (Ignite ignite = Ignition.start()) {
            IgniteCache<Integer, String> cache = ignite.getOrCreateCache("myCacheName");

            // Store keys in cache (values will end up on different cache nodes).
            for (int i = 0; i < 10; i++)
                cache.put(i, Integer.toString(i));

            for (int i = 0; i < 10; i++)
                System.out.println("Got [key=" + i + ", val=" + cache.get(i) + ']');
        }
    }
}
