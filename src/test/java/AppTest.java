/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import com.google.common.reflect.TypeToken;
import com.google.gson.Gson;
import com.qidianai.bitmaker.event.EvTicker;
import com.qidianai.bitmaker.event.EvTest;
import com.qidianai.bitmaker.eventsys.Event;
import com.qidianai.bitmaker.eventsys.Reactor;
import com.qidianai.bitmaker.eventsys.HandlerBase;
import com.qidianai.bitmaker.marketclient.okcoin.JsonMsg;
import com.qidianai.bitmaker.marketclient.okcoin.JsonUserInfo;
import com.qidianai.bitmaker.notification.SMTPNotify;
import org.apache.ignite.Ignite;
import org.apache.ignite.IgniteCache;
import org.apache.ignite.Ignition;
import org.junit.Test;

import java.lang.reflect.Type;
import java.util.concurrent.ConcurrentHashMap;


import static org.junit.Assert.*;

public class AppTest {
    @Test public void test() {
        App classUnderTest = new App();


        EvTicker q = new EvTicker();
        EvTest t = new EvTest();

        Long a = new Long(1L);
        Long b = new Long(1L);


        assertFalse(a == b);

        ConcurrentHashMap<Long, String> hashmap = new ConcurrentHashMap<>();
        hashmap.put(1L, "hi");

        assertTrue(hashmap.containsKey(1L));



    }

    @Test public void ReactorTest() throws InterruptedException {
        HandlerBase handler = new HandlerBase() {
            @Override
            public void handle(Event ev) {
                System.out.println(ev);
                System.out.println(ev.getData());
            }
        };

//        EvTicker q = new EvTicker();
//        EvTest t = new EvTest();
//
//        q.setData(t);

        Reactor reactor = Reactor.getInstance();


        //reactor.start();

        reactor.register(EvTicker.class, handler);
        reactor.register(EvTest.class, handler);

//
//        reactor.publish(q);
//        reactor.publish(t);

        //Thread.sleep(1000);
        //reactor.stop();
    }

    @Test public void IgniteTest() {
//        Ignition.setClientMode(true);
//        try (Ignite ignite = Ignition.start()) {
//            IgniteCache<Integer, String> cache = ignite.getOrCreateCache("myCacheName");
//
//            // Store keys in cache (values will end up on different cache nodes).
//            for (int i = 0; i < 10; i++)
//                cache.put(i, Integer.toString(i));
//
//            for (int i = 0; i < 10; i++)
//                System.out.println("Got [key=" + i + ", val=" + cache.get(i) + ']');
//        }
    }

    @Test public void GsonTest() {
        String msg = "[{\"data\":{\"averagePrice\":\"0\",\"completedTradeAmount\":\"0\",\"createdDate\":1500796842450,\"id\":27462555,\"orderId\":27462555,\"status\":0,\"symbol\":\"eth_cny\",\"tradeAmount\":\"0.137\",\"tradePrice\":\"0\",\"tradeType\":\"buy\",\"tradeUnitPrice\":\"1474.9\",\"unTrade\":\"0.137\"},\"channel\":\"ok_sub_spotcny_trades\"},{\"data\":{\"borrowFreeze\":0.0,\"info\":{\"lended\":{\"btc\":0.0,\"ltc\":0.0,\"cny\":0.0},\"lendFreeze\":{\"btc\":0.0,\"ltc\":0.0,\"cny\":0.0},\"fund\":{\"btc\":0.0,\"ltc\":0.0},\"borrow\":{\"btc\":0.0,\"ltc\":0.0,\"cny\":0.0},\"free\":{\"btc\":3.0E-4,\"eth\":9.325E-4,\"ltc\":0.0,\"cny\":0.5592},\"lend\":{\"btc\":0.0,\"ltc\":0.0,\"cny\":0.0},\"freezed\":{\"btc\":0.0,\"eth\":0.0,\"ltc\":0.0,\"cny\":202.0613},\"binterest\":{\"btc\":0.0,\"ltc\":0.0,\"cny\":0.0}}},\"channel\":\"ok_sub_spotcny_userinfo\"}]";
        String msg2 = "[{\"data\":{\"result\":true,\"info\":{\"funds\":{\"asset\":{\"total\":\"211.58\",\"net\":\"211.58\"},\"free\":{\"btc\":\"0.0003\",\"eth\":\"0.137864\",\"ltc\":\"0\",\"cny\":\"0.65748\"},\"freezed\":{\"btc\":\"0\",\"eth\":\"0\",\"ltc\":\"0\",\"cny\":\"0\"}}}},\"channel\":\"ok_spotcny_userinfo\"}]";
        //System.out.println(msg);
        Type type = new TypeToken<JsonMsg<JsonUserInfo>[]>() {
        }.getType();
        Gson gson = new Gson();
        JsonMsg<JsonUserInfo>[] pack = gson.fromJson(msg, type);
        JsonUserInfo data = pack[1].data;

        data.rearrange();

        String amountStr = String.format("%.3f", 1.2345678911111);

        System.out.println(data.info.freezed.cny);
        System.out.println(data.info.free.eth);
    }

    @Test public void SMTPTest() {
        SMTPNotify.send("BitMaker SMTP Test", "OK");
    }
}
